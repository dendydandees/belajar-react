{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","this","Component","Form","handleChange","event","target","value","setState","submitForm","handleSubmit","state","initialState","type","onChange","App","characters","filter","character","i","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d2731c9f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n/* 2. Create a simple component\r\n2.1 simple component use ES6 arrow function\r\n(Lanjut ke line 55)\r\n*/\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Job</th>\r\n                <th>Remove</th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\n/* diganti oleh props pada point 3.1\r\nconst TableBody = () => {\r\n    return (\r\n        <tbody>\r\n            <tr>\r\n                <td>Charlie</td>\r\n                <td>Janitor</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Mac</td>\r\n                <td>Bouncer</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Dee</td>\r\n                <td>Aspiring actress</td>\r\n            </tr>\r\n            <tr>\r\n                <td>Dennis</td>\r\n                <td>Bartender</td>\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}\r\n*/\r\n\r\n\r\n/* 3.5 memetakan data props yang berupa objek dalam array\r\n- props dikirimkan sebagai parameter,\r\n- map untuk memetakan array dan mengembalikan table row untuk setiap objek dalam array, hasilnya akan terdapat di dalam variabel rows sebagai expression\r\n- key digunakan sebagai index untuk tiap row. Pada react keys digunakan untuk mengidentifikasi tiap list item. \r\n(SELESAI)\r\n*/\r\n/* 4.5 merender button pada component \r\n- index sebagai parameter untuk acuan filter pada function mengetahui item yang akan di remove\r\n- pada button diberikan onClick() untuk mengirimkan function removeCharacter()\r\n(lanjut ke line 74)\r\n*/\r\nconst TableBody = (props) => {\r\n    const rows = props.characterData.map((row, index) => {\r\n        return (\r\n            <tr key = { index }>\r\n                <td>{ row.name }</td>\r\n                <td>{ row.job }</td>\r\n                <td>\r\n                    <button onClick={() => props.removeCharacter(index)}>Delete</button>\r\n                </td>\r\n            </tr>\r\n        )\r\n    })\r\n    return <tbody>{ rows }</tbody>\r\n}\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        //3.3 Data yang diterima dari App.js didefiniskan menggunakan ES6 property shorthand (lanjut ke line 62)\r\n        //4.6 Mendefinisikan function sama seperti pada 3.3 (lanjut ke line 72)\r\n        const { characterData, removeCharacter } = this.props\r\n\r\n        return (\r\n            //2.2 simple component digunakan oleh <table>, dengan syarat harus berada difile yang sama (lanjut ke line 64)\r\n            //3.4 Data yang didefinisikan di line 54 dimasukan sebagai properties (lanjut ke line 48)\r\n            //4.7 Function yang didefinisikan pada line 65 dimasukan sebagai properties sama seperti 3.4 (lanjut ke line)\r\n            <table>\r\n                <TableHeader />\r\n                <TableBody characterData = { characterData } removeCharacter = { removeCharacter } />\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\n/*2.3 export component\r\n- (Lanjut ke App.js line 6)\r\n*/\r\nexport default Table","import React, { Component } from 'react'\r\n\r\n/* 5 Passing data to state (Memulai data parent dari nol)\r\n5.1 - constructor() dibutuhkan untuk menggunakan this, dan menerima props dari parent\r\n- menetapkan initialState ke this.state sebagai data yang kosong\r\n(lanjut ke line 23)\r\n*/\r\nclass Form extends Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        this.initialState = {\r\n            name : '',\r\n            job : '',\r\n        }\r\n\r\n        this.state = this.initialState\r\n    }\r\n\r\n    /* 5.2 - menambahkan function yang akan berjalan setiap kali perubahan dilakukan ke input\r\n    - Event akan dikirimkan dan set the state of form untuk memiliki name(key) dan value sebagai input\r\n    (lanjut ke line 34)\r\n    */\r\n    handleChange = event => {\r\n        const { name, value } = event.target\r\n\r\n        this.setState({\r\n            [name] : value,\r\n        })\r\n    }\r\n\r\n    /* 5.6 create method submitForm() yang akan memanggil function, dan mengirimkan form state sebagai character parameter yang di defiisikan pada App.js\r\n    - ini juga akan reset state menjadi initial state, untuk menghapus form setelah mensubmit\r\n    (lanjut ke line 56)\r\n    */\r\n    submitForm = () => {\r\n        this.props.handleSubmit( this.state )\r\n        this.setState( this.initialState )\r\n    }\r\n\r\n    /* 5.3 - mengambil 2 properties dari state dan kemudian menetapkan mereka sebagai values yang sesuai dengan form keys\r\n    - handleChange() method dijalankan sebagai onChange dari input\r\n    (lanjut ke App.js line ke 53)\r\n    */\r\n    /* 5.7 menambahkan submit button yang menggunakan onClick untuk menggantikan onSubmit karena tidak menggunakan fungsionalitas pengiriman standar (SELESAI)\r\n    */\r\n    render() {\r\n        const { name, job } = this.state\r\n        return (\r\n            <form>\r\n                <label>Name</label>\r\n                <input type=\"text\" name=\"name\" value={ name } onChange={ this.handleChange } />\r\n\r\n                <label>Job</label>\r\n                <input type=\"text\" name=\"job\" value={ job } onChange={ this.handleChange } />\r\n                <br/>\r\n\r\n                <input type=\"button\" value=\"Submit\" onClick={ this.submitForm } />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form","/* 1. Creating Class Component\r\n1.1 import Component sebagai properti pada react\r\n(Lanjut ke line 32)\r\n*/\r\nimport React, { Component } from 'react'\r\n//2.4 import custom element (Lanjut ke line 33)\r\nimport Table from './Table'\r\n//\r\nimport Form from './Form'\r\n\r\nclass App extends Component {\r\n    /* 4. State\r\n    4.1 create a state untuk memanipulasi data (data pada line 22 dipindahkan kedalam state.characters) digantikan dengan 5.1 (5.1 berada pada file Form.js)\r\n    (lanjut ke line 36)\r\n    */\r\n    state = {\r\n        characters : [\r\n            /*\r\n            {\r\n                name : 'Charlie',\r\n                job : 'Janitor',\r\n            },\r\n            {\r\n                name: 'Mac',\r\n                job: 'Bouncer',\r\n            },\r\n            {\r\n                name: 'Dee',\r\n                job: 'Aspring actress',\r\n            },\r\n            {\r\n                name: 'Dennis',\r\n                job: 'Bartender',\r\n            },\r\n            */\r\n        ],\r\n    }\r\n    \r\n    /* 4.2 - Retrieve (mengambil) state\r\n    - memberikan method pada state this.setState()\r\n    (lanjut ke line 50)\r\n    */\r\n    removeCharacter = index => {\r\n        const { characters } = this.state\r\n\r\n        this.setState({\r\n            characters : characters.filter((character, i) => {\r\n                return i !== index\r\n            }),\r\n        })\r\n    }\r\n\r\n    /* 5.4 - membuat function handleSubmit() yang akan mengupdate state dengan data yang sudah ada dari this.state.characters\r\n    - menambahkan character parameter menggunakan ES6 spread operator\r\n    (lanjut ke line 98)\r\n    */\r\n    handleSubmit = character => {\r\n        this.setState({ characters : [ ...this.state.characters, character ]\r\n        })\r\n    }\r\n\r\n    render () {\r\n        //4.3 Meneruskan function kepada Component (lanjut ke line 83)\r\n        const { characters } = this.state\r\n\r\n        /* 3. Props \r\n        3.1 create simple component untuk props\r\n        menyimpan data pada array of objects, seolah olah membawa API berbasis JSON (Lanjut ke line 37)\r\n        \r\n        const characters = [\r\n            {\r\n                name: 'Charlie',\r\n                job: 'Janitor',\r\n            },\r\n            {\r\n                name: 'Mac',\r\n                job: 'Bouncer',\r\n            },\r\n            {\r\n                name: 'Dee',\r\n                job: 'Aspring actress',\r\n            },\r\n            {\r\n                name: 'Dennis',\r\n                job: 'Bartender',\r\n            },\r\n        ]\r\n        */\r\n        \r\n        return (\r\n        // 1.2 adding className to div element (Lanjut ke line 43)\r\n        // 2.5 mendefinisikan <Table />, disebut dengan custom component (SELESAI)\r\n        //3.2 mengirimkan data JSON ke child component (Lanjut ke Table.js line 55)\r\n        // 4.4 merender button di setiap characters yang dapat memanggil function (lanjut ke Table.js line 53)\r\n        // 5.5 merender <Form /> dengan properties dari function handleSubmit()(lanjut ke Form.js line 34)\r\n        <div className=\"container\">\r\n            <h1>Hello React !</h1>\r\n            <Form handleSubmit={ this.handleSubmit } />\r\n            <Table characterData={ characters } removeCharacter={ this.removeCharacter } />\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n/* 1.3 export Component and load in index.js\r\n- (Lanjut ke index.js line 3)\r\n*/\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n//1.4 import Component App.js (Lanjut ke line 9)\nimport App from './App'\n\n/*6. (OPTIONAL) Pulling in API Data\n6.1 gather data form URL endpoint in Api.js\n(lanjut ke Api.js line 1)\n\nimport App from './Api'\n\n*/\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\n\n//1.5 App.js dirender kedalam root (public/index.html) (SELESAI)\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}